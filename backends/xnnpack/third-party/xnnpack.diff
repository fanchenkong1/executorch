diff --git a/CMakeLists.txt b/CMakeLists.txt
index aea02fcfd..0decb2f85 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -83,6 +83,8 @@ ELSEIF(CMAKE_GENERATOR MATCHES "^Visual Studio " AND CMAKE_GENERATOR_PLATFORM)
   ELSE()
     MESSAGE(FATAL_ERROR "Unsupported Visual Studio architecture \"${CMAKE_GENERATOR_PLATFORM}\"")
   ENDIF()
+ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Emscripten")
+  SET(XNNPACK_TARGET_PROCESSOR "wasm")
 ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^i[3-7]86$")
   SET(XNNPACK_TARGET_PROCESSOR "x86")
 ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64")
@@ -253,7 +255,7 @@ ENDIF()
 # ---[ Build flags
 IF(NOT CMAKE_SYSTEM_NAME)
   MESSAGE(FATAL_ERROR "CMAKE_SYSTEM_NAME not defined")
-ELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES "^(Android|Darwin|iOS|Linux|Windows|CYGWIN|MSYS|QURT)$")
+ELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES "^(Android|Darwin|iOS|Linux|Windows|CYGWIN|MSYS|QURT|Emscripten)$")
   MESSAGE(FATAL_ERROR "Unrecognized CMAKE_SYSTEM_NAME value \"${CMAKE_SYSTEM_NAME}\"")
 ENDIF()
 IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
@@ -516,6 +518,9 @@ SET(PROD_AVXVNNI_MICROKERNEL_SRCS src/amalgam/gen/avxvnni.c)
 SET(PROD_AVX256SKX_MICROKERNEL_SRCS src/amalgam/gen/avx256skx.c)
 SET(PROD_AVX256VNNI_MICROKERNEL_SRCS src/amalgam/gen/avx256vnni.c)
 SET(PROD_AVX256VNNIGFNI_MICROKERNEL_SRCS src/amalgam/gen/avx256vnnigfni.c)
+SET(PROD_WASM_MICROKERNEL_SRCS src/amalgam/gen/wasm.c)
+SET(PROD_WASMSIMD_MICROKERNEL_SRCS src/amalgam/gen/wasmsimd.c)
+SET(PROD_WASMRELAXEDSIMD_MICROKERNEL_SRCS src/amalgam/gen/wasmrelaxedsimd.c)
 
 SET(PROD_MICROKERNEL_SRCS ${PROD_SCALAR_MICROKERNEL_SRCS})
 SET(ALL_MICROKERNEL_SRCS ${ALL_SCALAR_MICROKERNEL_SRCS})
@@ -712,6 +717,14 @@ IF(XNNPACK_TARGET_PROCESSOR MATCHES "^riscv")
     LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_RVVFP16ARITH_MICROKERNEL_SRCS})
   ENDIF()
 ENDIF()
+IF(XNNPACK_TARGET_PROCESSOR MATCHES "wasm")
+  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_WASM_MICROKERNEL_SRCS})
+  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_WASMSIMD_MICROKERNEL_SRCS})
+  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_WASMRELAXEDSIMD_MICROKERNEL_SRCS})
+  LIST(APPEND ALL_MICROKERNEL_SRCS ${All_WASM_MICROKERNEL_SRCS})
+  LIST(APPEND All_MICROKERNEL_SRCS ${All_WASMSIMD_MICROKERNEL_SRCS})
+  LIST(APPEND All_MICROKERNEL_SRCS ${All_WASMRELAXEDSIMD_MICROKERNEL_SRCS})
+ENDIF()
 
 IF (NOT DEFINED Python_EXECUTABLE)
   find_package(Python COMPONENTS Interpreter)
